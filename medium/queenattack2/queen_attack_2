#include <bits/stdc++.h>
 using namespace std;
#define UP 0 
#define UPRIGHT 1 
#define HORIZONTALPLUS 2
#define DOWNRIGHT 3
#define DOWN 4
#define DOWNLEFT 5 
#define HORIZONTALMINUS 6 
#define UPLEFT 7 

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'queensAttack' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. INTEGER k
 *  3. INTEGER r_q
 *  4. INTEGER c_q
 *  5. 2D_INTEGER_ARRAY obstacles
 */

int queensAttack(int n, int k, int r_q, int c_q, vector<vector<int>> obstacles) {
    auto closestobstacles = new int[8][2];
    for(int i = 0; i < 8; ++i) {
        for(int j = 0; j < 2; ++j){
            closestobstacles[i][j] = 0;
        }
    }
    for(auto obs : obstacles){
        int x = c_q - obs[0];
        int y = r_q - obs[1];
        if(x == 0 && y > 0 && (closestobstacles[UP][1] > y || closestobstacles[UP][1] == 0))  {
            closestobstacles[UP][0] = x;
            closestobstacles[UP][1] = y;
        }
        else if(x == y && x > 0 && y > 0 && ((closestobstacles[UPRIGHT][0] > y && closestobstacles[UPRIGHT][1] > x) || closestobstacles[UPRIGHT][0] == 0)){
            closestobstacles[UPRIGHT][0] = x;
            closestobstacles[UPRIGHT][1] = y;
        }
        else if(x > 0 && y == 0 && (closestobstacles[HORIZONTALPLUS][0] > x || closestobstacles[HORIZONTALPLUS][0] == 0)){
            closestobstacles[HORIZONTALPLUS][0] = x;
            closestobstacles[HORIZONTALPLUS][1] = y;
        }
        else if(-x == y && x > 0 && y < 0 && (closestobstacles[DOWNRIGHT][0] < x || closestobstacles[HORIZONTALPLUS][0] == 0)){
            closestobstacles[HORIZONTALPLUS][0] = x;
            closestobstacles[HORIZONTALPLUS][1] = y;
        }
        else if(x == 0 && y < 0 && (closestobstacles[DOWN][1] < y || closestobstacles[DOWN][1] == 0))  {
            closestobstacles[DOWN][0] = x;
            closestobstacles[DOWN][1] = y;
        }
        else if(x == y && x < 0 && y < 0 && (closestobstacles[DOWNLEFT][0] < x || closestobstacles[DOWNLEFT][0] == 0)){
            closestobstacles[DOWNLEFT][0] = x;
            closestobstacles[DOWNLEFT][1] = y;
        }
        else if(x < 0 && y == 0 && (closestobstacles[HORIZONTALMINUS][0] > x || closestobstacles[HORIZONTALMINUS][0] == 0)){
            closestobstacles[HORIZONTALMINUS][0] = x;
            closestobstacles[HORIZONTALMINUS][1] = y;
        }
        else if(-x == y && x < 0 && y > 0 && (closestobstacles[UPLEFT][0] < x || closestobstacles[UPLEFT][0] == 0)){
            closestobstacles[UPLEFT][0] = x;
            closestobstacles[UPLEFT][1] = y;
        }
    }
    int squares = 0;
    for(int i = 0; i < 8; ++i) {
                switch (i){
                    case 0:
                    case 1:
                        if(closestobstacles[i][1] == 0)
                            squares += n - c_q;
                        else
                            squares += c_q - closestobstacles[i][1];
                        break;
                    case 2:
                    case 3:
                        if(closestobstacles[i][0] == 0)
                            squares += n - r_q;
                        else
                            squares += r_q - closestobstacles[i][0];
                        break;
                    case 4:
                    case 5:
                        if(closestobstacles[i][1] == 0)
                            squares += n - c_q;
                        else
                            squares += c_q - closestobstacles[i][1];
                        break;
                    case 6:
                    case 7:
                        if(closestobstacles[i][0] == 0)
                            squares += n - r_q;
                        else
                            squares += r_q - closestobstacles[i][0];
                        break;
                    default:
                        squares += 0;
                        break; 
                }    
    }
    return squares;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string first_multiple_input_temp;
    getline(cin, first_multiple_input_temp);

    vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));

    int n = stoi(first_multiple_input[0]);

    int k = stoi(first_multiple_input[1]);

    string second_multiple_input_temp;
    getline(cin, second_multiple_input_temp);

    vector<string> second_multiple_input = split(rtrim(second_multiple_input_temp));

    int r_q = stoi(second_multiple_input[0]);

    int c_q = stoi(second_multiple_input[1]);

    vector<vector<int>> obstacles(k);

    for (int i = 0; i < k; i++) {
        obstacles[i].resize(2);

        string obstacles_row_temp_temp;
        getline(cin, obstacles_row_temp_temp);

        vector<string> obstacles_row_temp = split(rtrim(obstacles_row_temp_temp));

        for (int j = 0; j < 2; j++) {
            int obstacles_row_item = stoi(obstacles_row_temp[j]);

            obstacles[i][j] = obstacles_row_item;
        }
    }

    int result = queensAttack(n, k, r_q, c_q, obstacles);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}

